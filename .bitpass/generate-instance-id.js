const { writeFileSync, existsSync, readFileSync } = require('fs');
const { resolve } = require('path');
const { randomUUID } = require('crypto');

const instancePath = resolve(process.cwd(), '.bitpass/.instance-id');
const outputPath = resolve(process.cwd(), 'lib/instance-id.ts');

let shouldGenerate = true;

if (existsSync(instancePath)) {
  const content = readFileSync(instancePath, 'utf-8').trim();
  if (content && content !== 'none') {
    console.log('ℹ️ .instance-id already exists and is valid. Skipping generation.');
    shouldGenerate = false;
  } else {
    console.log('⚠️ .instance-id exists but is invalid (empty or "none"). Regenerating...');
  }
}

let id;
if (shouldGenerate) {
  id = randomUUID();
  writeFileSync(instancePath, id, 'utf-8');
  console.log(`✅ .instance-id generated: ${id}`);
} else {
  id = readFileSync(instancePath, 'utf-8').trim();
}

const tsFile = `// This file is autogenerated. Do not edit manually.
export const INSTANCE_ID = "${id}";
`;

writeFileSync(outputPath, tsFile, 'utf-8');
console.log('✅ lib/instance-id.ts generated with embedded value.');
